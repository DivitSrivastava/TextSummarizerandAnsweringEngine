# -*- coding: utf-8 -*-
"""TSAAE.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17FcfglS2zsyNXT8tmKxpXkJrxIdBOXEY
"""
from transformers import pipeline
from sentence_transformers import SentenceTransformer
import gradio as gr

# Load Models
summarizer = pipeline("summarization")
qa_model = pipeline("question-answering")
sentence_model = SentenceTransformer('all-mpnet-base-v2')

def summarize_text(text, length=2):
    if length == 1:
        max_length = 150
    elif length == 2:
        max_length = 300
    else:
        max_length = 500
    summary = summarizer(text, max_length=max_length, min_length=30, do_sample=False)[0]['summary_text']
    return summary

def answer_question(text, question):
    answer = qa_model(question=question, context=text)
    return answer['answer']

# Gradio Interfaces
with gr.Blocks(theme=gr.themes.Citrus()) as demo:
  gr.Markdown("# Text Summarization and Answering Engine")
  gr.Markdown("**By Divit Srivastava**")
  with gr.Tabs():
    with gr.TabItem("SUMMARIZE YOUR TEXT"):
      input1=gr.Textbox(label="Enter your text.")
      input2=gr.Radio(choices=[1, 2, 3], label="Summarization Length")
      output1=gr.Textbox(label="Summarized Text")
      gr.Button("Get Summary!").click(fn=summarize_text, inputs=[input1, input2], outputs=output1)

    with gr.TabItem("ASK YOUR QUERIES"):
      input3=gr.Textbox(label="Enter your text.")
      input4=gr.Textbox(label="Enter your question.")
      output2=gr.Textbox(label="Answer")
      gr.Button("Get Answer!").click(fn=answer_question, inputs=[input3, input4], outputs=output2)

demo.launch()
